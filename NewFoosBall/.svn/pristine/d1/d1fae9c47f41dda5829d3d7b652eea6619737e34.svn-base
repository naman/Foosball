/*package foosballTests;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import game.Ball;
import game.Formation;
import game.Team;
import game.TeamSide;
import mainclasses.Game;
import misc.CoinSide;
import misc.Position;
import notifications.GoalNotification;
import notifications.Notification;
import notifications.ResetLayoutNotification;

import org.testng.annotations.Test;

import strategies.TeamStrategy;


public class NewTest {
  //TODO 

 * 1. all the notifications are running after all the flags have been cleared
 * 2. ball goes to the  conceding team's gk
 * d3. wall reflections are perfect (compare initial and after reflection speeds) X
 * d4. wall reflections are perfect (compare initial and after reflection speeds) Y
 * 5. attacker stays an attacker after shooting
 * 6. defence team strategy changes after blocking and passing
 * d7. score being updated on Goal
 * d8. ball x speed resetting to zero
 * d9. ball y speed resetting to zero
 * 10. 
 * 11. 
 * 12. 
 * 13. 
 * 14. 
 * 15. 
 * 16. 
 

	@Test
	public void allThreadsHaveProcessedTheNotification() {
		Game game = new Game(new Formation(4, 3, 3), TeamSide.LEFT, CoinSide.HEADS);
//		Notification goal = new GoalNotification("Goal!",game,game.getField().getTeamA(),game.getScoreBoard());

		boolean finalValue = goal.handledByBallLogicThread && goal.handledByMainThread 
				&& goal.handledByRenderingThread && goal.handledByTeamLogicThreadA
				&& goal.handledByTeamLogicThreadB;
		assertThat(finalValue,is(equalTo(true)));
	}
	
	@Test
	public void wallReflectionsArePerfectinTermsOfXAxis() {
		Game game = new Game(new Formation(4, 3, 3), TeamSide.LEFT, CoinSide.HEADS);
		Ball ball = game.getField().getBall();
		int initialXSpeed = ball.getxSpeed();
		for(int i = 0;i<4;i++) 
		{
			if(ball.silhouette.intersects(ball.game.getField().getWalls().silhouette[i]))
			{
				if (i%2 == 0)		ball.setySpeed(-1 * ball.getySpeed());
				else				ball.setxSpeed(-1 * ball.getxSpeed());
			}
		}	
		assertThat(ball.getxSpeed(), is(equalTo(initialXSpeed)));
	}
	
	@Test
	public void wallReflectionsArePerfectinTermsOfYAxis() {
		Game game = new Game(new Formation(4, 3, 3), TeamSide.LEFT, CoinSide.HEADS);
		Ball ball = game.getField().getBall();
		int initialYSpeed = ball.getySpeed();
		for(int i = 0;i<4;i++) {
			if(ball.silhouette.intersects(ball.game.getField().getWalls().silhouette[i]))
			{
				if (i%2 == 0)
				{
					ball.setySpeed(-1 * ball.getySpeed());
				}
				else
				{
					ball.setxSpeed(-1 * ball.getxSpeed());
				}
			}
		}	
		assertThat(ball.getySpeed(), is(equalTo(initialYSpeed)));
	}
	
	@Test
	public void concedingTeamGKHasTheBallAfterAGoal() {
		Game game = new Game(new Formation(4, 3, 3), TeamSide.LEFT, CoinSide.HEADS);
		Ball ball = game.getField().getBall();
		
		Position ballPossitionAfterGoal = new Position(ball.getBallPosition());
		Team concedingTeam = ball.getLastContactTeam().getOpponent();
		Position concedingTeamGKPostion = new Position(concedingTeam.getPositionOfGoalKeeper());

		assertThat(ballPossitionAfterGoal, is(equalTo(concedingTeamGKPostion)));
	}
	
	@Test
	public void attackerStaysAnAttackerAfterShooting(){
		Game game = new Game(new Formation(4, 3, 3), TeamSide.LEFT, CoinSide.HEADS);
		Ball ball = game.getField().getBall();
		Position ballPossitionAfterGoal = new Position(ball.getBallPosition());

		Team concedingTeam = ball.getLastContactTeam().getOpponent();
		Position concedingTeamGKPostion = new Position(concedingTeam.getPositionOfGoalKeeper());

		assertThat(ballPossitionAfterGoal, is(equalTo(concedingTeamGKPostion)));
	}
	
	@Test
	public void defenceStratergyChangesToAttack() {
		Game game = new Game(new Formation(4, 3, 3), TeamSide.LEFT, CoinSide.HEADS);
		Team teamA = game.getField().getTeamA();
		
		TeamStrategy teamStratergy = teamA.getStrategy();
//		assertThat(ballPossitionAfterGoal, is(equalTo(concedingTeamGKPostion)));
	}
	@Test
	public void BallxSpeedResetToZero() {
		Game game = new Game(new Formation(4, 3, 3), TeamSide.LEFT, CoinSide.HEADS);
		Notification reset = new ResetLayoutNotification(game);
		int speedAfterCollision = game.getField().getBall().getxSpeed();
		assertThat(speedAfterCollision, is(equalTo(0)));
	}
	@Test
	public void BallySpeedResetToZero() {
		Game game = new Game(new Formation(4, 3, 3), TeamSide.LEFT, CoinSide.HEADS);
		Notification reset = new ResetLayoutNotification(game);
		int speedAfterCollision = game.getField().getBall().getySpeed();
		assertThat(speedAfterCollision, is(equalTo(0)));
	}

	@Test
	public void ScoreBeingUpdatedOnGoal() {
		Game game = new Game(new Formation(4, 3, 3), TeamSide.LEFT, CoinSide.HEADS);
		Notification goal = new GoalNotification("Goal!",game,game.getField().getTeamA(),game.getScoreBoard());
		assertThat(game.getScoreBoard().getTotalGoals(), is(equalTo(1)));
	}
	
	
}

*/